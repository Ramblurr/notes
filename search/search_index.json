{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ramblurr's Notes","text":"<p>Projects, snippets, and notes for my future self.</p>"},{"location":"HomeOps/","title":"HomeOps","text":"Home Ops"},{"location":"HomeOps/#overview","title":"Overview","text":"<p>Welcome to my home operations repo.</p> <p>This repo contains the configuration for my bare-metal servers, virtual machines, containers, and proxmox cluster.</p>"},{"location":"HomeOps/#tools","title":"Tools","text":"<p>My primary tools for managing my infra:</p> Tool Purpose ansible configure the  servers sops encrypt secrets on disk"},{"location":"HomeOps/#hardware","title":"Hardware","text":""},{"location":"HomeOps/#compute-and-storage","title":"Compute and Storage","text":"Device Count OS Disk Size Data Disk Size Ram Purpose TrueNAS 1 256GB NVMe 4x8TB ZFS, 8x12 TB ZFS 32GB shared storage Intel NUCNUC10i7FNH 3 - 2TB NVMe, 2TB SATA SDD ZFS 64GB Proxmox Nodes Raspberry PI 3 B 2 8GB MMC N/A 512 MB dns1 and dns2"},{"location":"HomeOps/#networking","title":"Networking","text":"Device Count Unifi Security Gateway (USG) 1 Unifi Switch 24 port POE 1 Unifi Switch Pro 24 port POE 1 Unifi Switch 8 port POE 2 Unifi Switch Flex 2 Unifi AP AC-lite 2 Unifi Access Point U6 Lite 1 Unifi Cloud Key 1 ISP Modem 1 Raspberry PI 3 B - WAN2 failover - LTE 1 Mikrotik CRS309-1G-8S+IN 10GB Switch 1 PiKVM Raspberry Pi 4 2GB 1 TESMART Managed multiport KVM switch 1"},{"location":"HomeOps/#10gbe-network-hardware","title":"10GbE Network Hardware","text":"Device Connection Card USW-24 SFP+ built-in USW-Pro-24 SFP+ built-in NAS SFP+ Intel x520 Mikrotik CRS309-1G-8S+IN 10GB Switch builtin NUC1 SFP+/Thunderbolt3 Sonnet \u200eSOLO10G-SFP-T3 NUC2 SFP+/Thunderbolt3 Sonnet \u200eSOLO10G-SFP-T3 NUC3 SFP+/Thunderbolt3 Sonnet \u200eSOLO10G-SFP-T3"},{"location":"HomeOps/#thanks","title":"Thanks","text":"<p>Many thanks to the Self-Hosted community (Discord).</p> Datacenter iconmade by Eucalyp from www.flaticon.com"},{"location":"HomeOps/proxmox/","title":"Proxmox","text":"<p>I run Proxmox VE 7 in a 3 node cluster. Each node has 2x 2TB disk in ZFS RAID 1 (mirror). Each node also has access to NFS via my TrueNAS for shared storage. I've found running Ceph at home to be more trouble that its worth.</p>"},{"location":"HomeOps/proxmox/#install-checklist","title":"Install checklist","text":"<p>From Proxmox VE 7 the install is straightforward, just choose your settings and go.</p> <p>When prompted for the hostname, use a FQDN.</p> <pre><code># yes\nmynode.mydomain.com\n\n# no\nmynode\n</code></pre>"},{"location":"HomeOps/proxmox/#post-install-checklist","title":"Post-install checklist","text":"<p>This checklist is automated with my <code>rmblr-proxmox-setup</code> role (it might be more up to date than this list!).</p> <ul> <li>Install pve-no-subscription repo</li> <li>Configure the network interfaces</li> <li>Enable backports</li> <li>Remove pve-enterprise repo</li> <li>Disable IPV6</li> <li>Install my admin tools</li> <li>Install acme plugin and cloudflare DNS configuration</li> <li>Install borg+borgmatic and configure backups with Healthchecks</li> </ul>"},{"location":"HomeOps/proxmox/#configuring-cluster","title":"Configuring Cluster","text":"<ol> <li>Install Proxmox VE on three nodes, use ZFS as the fs.</li> <li>Run the bootstrap ansible role</li> <li>From one node create the cluster</li> <li>Join the other nodes to the cluster</li> <li>Run the bootstrap ansible role again, because the joined nodes lose their ACME config, this re-adds it so you have valid certs</li> </ol>"},{"location":"HomeOps/proxmox/#replicating-vms","title":"Replicating VMs","text":"<p>From the Datacenter menu, go to Replication and add manual replication settings for each vm</p>"},{"location":"HomeOps/proxmox/#replacing-a-zfs-boot-disk","title":"Replacing a ZFS Boot Disk","text":"<p>You might need to replace a proxmox boot disk that is in the ZFS pool.</p> <p>You should note that the Proxmox partition convention is:</p> <pre><code>Partition 1 = BIOS Boot\nPartition 2 = EFI Boot\nPartition 3 = ZFS\n</code></pre> <p>This is the replacement procedure</p> <p>Given <code>/dev/sda</code> and <code>/dev/sdb</code>. <code>/dev/sdb</code> is the disk you want to replace.</p> <p>Pull your <code>/dev/sdb</code> from the chassis. Insert your new disk.</p> <p>Now <code>/dev/sdb</code> is a fresh disk that needs to join the pool</p> <p>Copy the partition table from <code>/dev/sda</code> to <code>/dev/sdb</code> and initialize new GUIDS for the partitions.</p> <pre><code># WARNING the order of these flags is very important. If not careful you'll wipe your good drive.\nsgdisk /dev/sda -R /dev/sdb\nsgdisk -G /dev/sdb\n</code></pre> <p>Next you should replace the bad disk in the ZFS pool. Get the id of the old disk using <code>zpool status</code> it should be marked as offline.</p> <pre><code># Important, use partition 3!\nzpool replace -f rpool &lt;OLD DISK&gt; /dev/disk/by-id/sdb-part3\n</code></pre> <p>Now ZFS will start resilvering. You can check the status of the resilver process with:</p> <pre><code>zpool status -v rpool\n</code></pre> <p>After resilvering is complete, we need to install the boot environment on the EFI partition (partition # 2).</p> <pre><code>proxmox-boot-tool format /dev/sdb2\nproxmox-boot-tool init /dev/sdb2\nproxmox-boot-tool refresh\n</code></pre> <p>This refreshes the boot environments on all EFI/BIOS boot partitions in the system. All disks are now bootable.</p>"},{"location":"HomeOps/proxmox/#tailscale-in-a-container","title":"Tailscale in a container:","text":"<p>Add </p> <p>lxc.cgroup.devices.allow: c 10:200 rwm lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file</p>"},{"location":"HomeOps/proxmox/#setting-up-nfs-share","title":"Setting up NFS Share","text":"<p>Use an NFS share for storing snippets, isos, etc</p> <ol> <li>Create dataset in freenas</li> <li>Create NFS share in freenas    Add authorized IPs</li> <li>Create nfs user with dataset as home dir    Set wheel as the primary group for the user    Disable password</li> <li> <p>Edit the nfs share    MapallUser -&gt; nfs user</p> </li> <li> <p>Storage &gt; Poosl &gt; NFS Dataset &gt; Edit Perms</p> <p>Owner: nfs user Group: Wheel Remove other permissions 6. In proxmox: Datacenter &gt; Storage &gt; Add NFS</p> </li> </ol> <p>source: https://www.youtube.com/watch?v=zeOe26fw7lo</p>"},{"location":"HomeOps/proxmox/#multiple-vlans-with-single-nic","title":"Multiple VLANs with Single NIC","text":"<p>Goals:</p> <ul> <li>proxmox web ui and ssh port is on vlan 10</li> <li>VMs and LXC containers assigned addreses on vlan 20</li> </ul> <p>Edit <code>/etc/network/interfaces</code></p> <pre><code>auto lo\niface lo inet loopback\n\nauto eno1\niface eno1 inet static\n        address  0.0.0.0\n        netmask  0.0.0.0\n\nauto eno1.10\niface eno1.1 inet static\n        address  0.0.0.0\n        netmask  0.0.0.0\n\nauto eno1.20\niface eno1.2 inet static\n        address  0.0.0.0\n        netmask  0.0.0.0\n\nauto vmbr10\niface vmbr10 inet static\n    address 10.8.10.10/24\n    gateway 10.8.10.1\n        bridge_ports eno1.10\n        bridge_stp off\n        bridge_fd 0\n\nauto vmbr20\niface vmbr20 inet static\n        address  10.8.20.5/24\n        bridge_ports eno1.20\n        bridge_stp off\n        bridge_fd 0\n</code></pre>"},{"location":"HomeOps/proxmox/#installing-proxmox-as-a-vm-in-freenas","title":"Installing Proxmox as a VM in FreeNAS","text":"<p>When you create the proxmox virtual machine and boot it the boot process will fail after obtaining a dhcp lease</p> <pre><code>Starting a root shell on tty3\n\\nInstallation aborted - unable to continue \n</code></pre> <p>To fix this, use the provided shell to <pre><code>chmod 1777 /tmp   \napt update\napt upgrade\nXorg -configure   \nmv /xorg.conf.new /etc/X11/xorg.conf\nvim /etc/X11/xorg.conf\n# change the Screen Driver to \"fbdev\"\nstartx\n</code></pre></p> <p>Then the installer will start. Install. Then X will exit. Power off the VM. Remove the cdrom device.</p>"},{"location":"HomeOps/proxmox/#import-a-cloudimg","title":"Import a cloudimg","text":"<p>This has been wrapped in the ansible role <code>proxmox-template</code>.</p> <pre><code>wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img\nqm create 101 --memory 1024 --net0 virtio,bridge=vmbr20\nqm importdisk 101 ./focal-server-cloudimg-amd64.img local-zfs\nqm set 101 --scsihw virtio-scsi-pci --scsi0 local-zfs:vm-101-disk-0\nqm set 101 --ide2 local-zfs:cloudinit\nqm set 101 --boot c --bootdisk scsi0\nqm set 101 --serial0 socket --vga serial0\nqm set 101 --cipassword test --ciuser ubuntu\nqm set 101 --ipconfig0 ip=dhcp\nqm set 101 -agent 1\n\nqm template 101\n\nqm clone 101 201 --name dagon \nqm set 201 --memory 8192\nqm set 201 -agent 1\nqm set 201 --ipconfig0 ip=dhcp\nqm set 201 --net0 virtio,bridge=vmbr0,tag=10,firewall=1\nqm set 201 --net1 virtio,bridge=vmbr0,tag=20,firewall=1\nqm set 201 --cicustom \"user=snippets:snippets/user-data\"\nqm resize 201 scsi0 20G\ncat &lt;&lt; EOF &gt; /etc/pve/firewall/201.fw\n[OPTIONS]\nenable: 1\n[RULES]\nGROUP allowssh\nEOF\n\n\nqm clone 101 202 --name hydra\nqm set 202 --memory 8192\nqm set 202 -agent 1\nqm set 202 --ipconfig0 ip=dhcp\nqm set 202 --net0 virtio,bridge=vmbr0,tag=10\nqm set 202 --cicustom \"user=snippets:snippets/user-data\"\nqm resize 202 scsi0 20G\n\nqm clone 101 203 --name deepone\nqm set 203 --memory 8192\nqm set 203 -agent 1\nqm set 203 --ipconfig0 ip=dhcp\nqm set 203 --net0 virtio,bridge=vmbr0,tag=10\nqm set 203 --cicustom \"user=snippets:snippets/user-data\"\nqm resize 203 scsi0 20G\n\n\nqm set 201 --sshkey ~/casey.pub \n</code></pre> <p>https://pve.proxmox.com/wiki/Cloud-Init_Support</p>"},{"location":"HomeOps/proxmox/#custom-cloud-init-userdata","title":"Custom cloud init userdata","text":"<ol> <li>Go to Storage View -&gt; Storage -&gt; Add -&gt; Directory</li> <li>Give it an ID such as snippets, and specify any path on your host such as /srv/snippets</li> <li>Under Content choose Snippets and de-select Disk image</li> <li>Upload (scp/rsync/whatever) your user-data, meta-data, network-config files to your proxmox server in /srv/snippets/snippets/</li> </ol> <pre><code>qm set XXX --cicustom \"user=snippets:snippets/user-data\"\n\nOR \n\nqm set XXX --cicustom \"user=snippets:snippets/user-data,network=snippets:snippets/network-config,meta=snippets:snippets/meta-data\"\n\nqm cloudinit dump 204 user\n</code></pre> <p>If you following the \"Import a cloudimg\" above, the vm should already have a cloudinit drive.</p> <p>https://gist.github.com/aw/ce460c2100163c38734a83e09ac0439a</p>"},{"location":"HomeOps/proxmox/#remove-all-containers","title":"Remove all containers","text":"<pre><code>for i in $(pct list | awk '/\\d/{print $1}'); do pct destroy \"$i\" -purge ; done\n</code></pre>"},{"location":"HomeOps/proxmox/#deploy-fedora-coreos-template","title":"Deploy fedora coreos template","text":"<p>fedora core os on proxmox</p> <p>on workstation: <pre><code>cd workspace/\ncoreos-installer download -s stable -p qemu -f qcow2.xz --decompress -C .\nscp fedora-coreos-34.20210904.3.0-qemu.x86_64.qcow2 PROXMOX_HOST:\n</code></pre></p> <p>on proxmox host: 1. (in ui) create a vm and remove the default disks 2. import the image</p> <p><pre><code>qm importdisk 9996 ./fedora-coreos-34.20210904.3.0-qemu.x86_64.qcow2 local-zfs\nqm set 9996 --scsi0 local-zfs:vm-9996-disk-1\nqm set 9996 --boot order=scsi0\nqm template 9996\n</code></pre> 3. create vms from the template, then for each one:</p> <pre><code>vi /etc/pve/qemu-server/VMID.conf\nadd:\n  args: -fw_cfg name=opt/com.coreos/config,file=/mnt/pve/mali/snippets/server-1.ign\n</code></pre> <ol> <li>make sure the snippet file exists, and edit the file for the corresponding server+client number</li> </ol>"},{"location":"HomeOps/rpi-usg-4g-failover/","title":"Unifi USG LTE Failover","text":"<p>This document describes how to setup WAN failover for a Unifi USG to an LTE network accesed via a 4G USB dongle plugged in to a Raspberry Pi.</p> <p>Most of this guide is dedicated to configuring a Raspberry PI to act as a mini-router.</p> <p>A few things of note:</p> <ul> <li> <p>Despite using a LTE dongle, you won't get LTE speeds unless you use a PI with   a gigabit NIC, which in October 2020 is only the RPI 4. more info</p> </li> <li> <p>The PI and dongle are configured to NAT. This is ugly, but works for my use   case. In a failover scenario, I'm ok with external access being cut.</p> </li> </ul> <p>In theory it is possible to switch the dongle into modem mode   [0],   but I haven't tried this. You'd need to alter this config anyways to remove the NAT on the PI.</p>"},{"location":"HomeOps/rpi-usg-4g-failover/#hardware","title":"Hardware","text":"<ul> <li>Unifi USG</li> <li>An extra switch (unmanaged, 100mb or 1gbit depending on if your PI supports gbit or not)</li> <li>Raspberry Pi</li> <li>ZTE MF823 LTE USB Dongle</li> </ul>"},{"location":"HomeOps/rpi-usg-4g-failover/#software","title":"Software","text":"<ul> <li>Unifi Controller</li> <li>TinyCoreLinux PiCore download (v11 at time of writing)</li> </ul>"},{"location":"HomeOps/rpi-usg-4g-failover/#address-space","title":"Address Space","text":"<ul> <li><code>192.168.0.1/24</code> for <code>usb0</code> - this is the default subnet on the MF823, your home LAN musn't overlap with this.</li> <li><code>192.168.73.1/24</code> for <code>usb0</code> - we will change the MF823 to use this subnet editing the dongle's settings doesn't stick across reboots</li> <li><code>192.168.12.1/24</code> for <code>eth0</code> - for USG&lt;-&gt;PI</li> </ul>"},{"location":"HomeOps/rpi-usg-4g-failover/#pre-setup-test-lte-dongle-is-working","title":"Pre-setup - Test LTE dongle is working","text":"<p>Flash PiCore onto SD card</p> <p>Boot PiCore, plug into ethernet</p> <pre><code>sudo /sbin/udhcp -v -i eth0 -x hostname:wan2 -p /var/run/udhcp.eth0.pid\nping 1.1.1.1\n</code></pre> <p>Insert dongle .. wait for it to settle ~60 seconds</p> <p>Test</p> <pre><code>lsusb\n</code></pre> <p>While the dongle is booting it will show a red light and you will see <pre><code>ID 19d2:1225\n</code></pre></p> <p>After it is ready the light will turn green and it will change to <pre><code>ID 19d2:1405\n</code></pre></p> <p>Load the kernel module</p> <pre><code>modprobe cdc_ether\nifconfig -a\n</code></pre> <p>You should see <code>usb0</code></p> <p>Setup usb0</p> <pre><code>sudo /sbin/udhcp -v -i usb0 -x hostname:wan2 -p /var/run/udhcp.usb0.pid\nping 192.168.0.1\n</code></pre> <p>Use Socks proxy from your workstation to access MFG823's webui</p> <pre><code># on workstation on same LAN as the pi\nssh -D 1337 tc@192.168.1.146\n</code></pre> <p>(192.168.1.146 was the ip on my local lan the pi got for eth0)</p> <p>Use browser's socks settings to set socks 5 proxy 192.168.1.146 port 1337</p> <p>Browse to 192.168.0.1 in browser, confirm the web ui is loading. If you have a sim card in, you should see LTE network connection status.</p>"},{"location":"HomeOps/rpi-usg-4g-failover/#setup-of-pi","title":"Setup of PI","text":"<p>Ok its working. Time to setup the router on the pi.</p> <p>First, lets setup wifi on the pi. <code>eth0</code> will become the LAN port for the pi router, but we need a headless/oob management channel, this will be over wifi.</p> <p>SSH into the pi</p> <p>Add ssh config and passwd to persistent config</p> <pre><code>mkdir ~/.ssh\nvi ~/.ssh/authorized_keys\n# paste your ssh key\nsudo echo '/usr/local/etc/ssh' &gt;&gt; /opt/.filetool.lst \nsudo echo '/etc/shadow' &gt;&gt; /opt/.filetool.lst\nsudo echo '/home/tc/.ssh/' &gt;&gt; /opt/.filetool.lst\nfiletool.sh -b\n</code></pre> <p>Download the wifi extension and reboot to load the module <pre><code>tce-load -wi firmware-rpi-wifi.tcz\ntce-load -wi wifi.tcz\nsudo reboot\n</code></pre></p> <p>SSH again (using the key this time) and check for <code>wlan0</code></p> <pre><code>iwconfig\n</code></pre> <p>Connect to your AP</p> <pre><code>sudo /usr/local/bin/wifi.sh \n</code></pre> <p>Check <code>wlan0</code> connection</p> <pre><code>ifconfig wlan0\n</code></pre> <p>Configure auto wlan connect on system boot</p> <pre><code>sudo echo '/usr/local/bin/wifi.sh -a 2&gt;&amp;1 &gt; /tmp/wifi.log' &gt;&gt; /opt/bootlocal.sh\nfiletool.sh -b\n</code></pre> <p>Reboot to test wlan0 auto config <pre><code>sudo reboot\n</code></pre></p> <p>Quickly SSH in over the <code>eth0</code> interface, get the <code>wlan0</code> ip address and then ssh back in over wifi.</p> <p>From here on out I assume you are managing the pi over <code>wlan0</code>, as we will be making changes to <code>eth0</code>.</p> <p>NOTE: The following section is included, but does not seem to actually work. Everytime the dongle is rebooted, the settings are reverted.</p> <p>Next, let's change the subnet used by the ZTE MG 823 router so it doesn't use the common <code>192.168.0.1</code> subnet.</p> <p>Ssh into the Pi, then telnet into the router</p> <pre><code>telnet 192.168.0.1\n# user: root\n# password: zte9x15\n</code></pre> <p>Edit the file at <code>/usr/zte/zte_conf/config/userseting_nvconfig.txt</code></p> <p>Change the values:</p> <pre><code>dhcpStart\ndhcpEnd\nlan_ipaddr\nlan_ipaddr_for_current\n</code></pre> <p>I assume in the rest of this that you are using the subnet <code>192.168.73.0/24</code></p> <p>Actually, we continue with <code>192.168.0.1</code>, since the above is not sticking.</p> <p>Create <code>/opt/eth0.sh</code></p> <pre><code>#!/bin/sh\n\nsleep .5\n\nsleep 1\nif [ -f /var/run/udhcpc.eth0.pid ]; then\nkill `cat /var/run/udhcpc.eth0.pid`\nsleep 0.1\nfi\n\nifconfig eth0 192.168.12.1 netmask 255.255.255.0 broadcast 192.168.12.255 up\n\nsleep .1\nsudo udhcpd /etc/eth0_udhcpd.conf &amp;\n</code></pre> <p>Make it executable</p> <pre><code>chmod 775 /etc/eth0.sh\n</code></pre> <p>Create DHCP config for <code>eth0</code> in <code>/etc/eth0_udhcpd.conf</code></p> <pre><code>start 192.168.12.100\nend 192.168.12.200\ninterface eth0\noption subnet 255.255.255.0\noption router 192.168.12.1\noption lease 43200\noption dns 192.168.12.1\noption domain wanfailover\n</code></pre> <p>Start and test dhcp server. You should see it listening on port udp 67.</p> <pre><code>sudo udhcpd /etc/eth0_udhcpd.conf\nps -ef | grep udhcpd\nsudo netstat -anp | grep udhcpd\n</code></pre> <p>Create init script to manage <code>usb0</code> in <code>/etc/init.d/dhcp-usb0.sh</code></p> <p>Get file contets here <code>dhcp-usb0.sh</code></p> <p>Make it executable</p> <pre><code>chmod 766 /etc/init.d/dhcp-usb0.sh\n</code></pre> <p>Create udev rule to auto connect to the <code>usb0</code> network  in <code>/etc/udev/rules.d/15-zte-mf823.rules</code></p> <pre><code>SUBSYSTEM==\"usb\", ATTR{idProduct}==\"1405\", ATTR{idVendor}==\"19d2\", RUN+=\"/etc/init.d/dhcp-usb0.sh restart\"\n</code></pre> <p>Reload udev rules</p> <pre><code>sudo udevadm control --reload-rules \n</code></pre> <p>Unplug USB device, wait a few seconds, plug it back in. Check that <code>usb0</code> has an ip in the <code>192.168.0.0/24</code> subnet.</p> <p>Persist the config</p> <pre><code>sudo echo '/opt/eth0.sh' &gt;&gt; /opt/.filetool.lst\nsudo echo '/etc/eth0_udhcpd.conf' &gt;&gt; /opt/.filetool.lst\nsudo echo '/etc/init.d/dhcp-usb0.sh' &gt;&gt; /opt/.filetool.lst\nsudo echo '/etc/udev/rules.d/15-zte-mf823.rules' &gt;&gt; /opt/.filetool.lst\nsudo echo '/opt/eth0.sh &amp;' &gt;&gt; /opt/bootlocal.sh\nfiletool.sh -b \n</code></pre> <p>Reboot to test. You should see <code>eth0</code> with an ip address of <code>192.168.12.1</code>, and <code>usb0</code> should be configured.</p> <p>Enable ipv4 forwarding</p> <pre><code>sudo sysctl -w net.ipv4.ip_forward=1\nsudo echo 'sysctl -w net.ipv4.ip_forward=1' &gt;&gt; /opt/bootlocal.sh\nfiletool.sh -b\n</code></pre> <p>Install dnsmasq and iptables</p> <pre><code>tce-load -wi dnsmasq\ntce-load -wi iptables\n</code></pre> <p>Enable NAT</p> <pre><code>sudo iptables -t nat -A POSTROUTING -o usb0 -j MASQUERADE\n</code></pre> <p>Make it persistent</p> <pre><code>sudo echo 'iptables -t nat -A POSTROUTING -o usb0 -j MASQUERADE' &gt;&gt; /opt/bootlocal.sh\nsudo echo 'dnsmasq' &gt;&gt; /opt/bootlocal.sh\n</code></pre> <p>Finally, add a little script to remove the wifi default gateway. Without this, the wifi script will take over the default gateway. The actual default gateway is set by our usb udev script.</p> <p><code>/opt/fix-gw.sh</code></p> <pre><code>#!/bin/sh\n\ngw=$(route -n|grep \"UG\"|grep -v \"UGH\"|cut -f 10 -d \" \")\n\nif [ ! -z \"$gw\" ]; then\n  route del default gw \"$gw\"\nfi\n</code></pre> <p>Save it</p> <pre><code>chmod 777 /opt/fix-gw.sh\nsudo echo '/opt/fix-gw.sh' &gt;&gt; /opt/.filetool.lst\nsudo echo '/opt/fix-gw.sh' &gt;&gt; /opt/bootlocal.sh\nfiletool.sh -b\n</code></pre> <p>Do a final reboot. Connect your pi to an empty switch, connect your laptop to the switch. You should have internet via the LTE dongle, verify with</p> <pre><code>curl https://iconfig.co/json | jq\n</code></pre> <p>You should see your LTE provider's info.</p>"},{"location":"HomeOps/rpi-usg-4g-failover/#unifi-usg-wan-failover-configuration","title":"Unifi USG WAN failover configuration","text":"<p>This is a small cluster-f*** depending on your Controller version and whether you have the old or new settings interface. In short, any docs you read about setting the \"Port Remapping\" feature are out of date since at least 2019.</p> <p>You must not be using the WAN2 port for LAN traffic.</p> <p>Assuming the old, non beta (as of Oct 2020) settings UI you can follow what is below.</p> <p>Are you from the future where the new beta UI is no longer beta, and the old UI is gone? Good luck.</p> <ol> <li> <p>Create a WAN2 network</p> <p>Settings -&gt; Networks -&gt; [ + Create New Network ] Purpose: WAN Network Group: WAN2 Load Balancing: dropdown, choose     \"Failover Only\" to use the WAN2 port only if WAN has failed</p> </li> <li> <p>Assign the USG's port to the WAN2 network</p> <p>Devices -&gt; USG -&gt; Ports tab -&gt; [ Configure interfaces ]</p> <p>Port WAN2/LAN2 Network: WAN2</p> <p>Apply</p> </li> </ol> <p>Wait for the USG to re-provision.</p> <p>Test it by sshing into the USG and execute:</p> <pre><code>ip addr # check eth2\nshow load-balance status\nshow load-balance watchdog\n</code></pre> <p>That's it. Unplug your WAN1, watch it failover to WAN2. Plug WAN1 back in and see WAN2 recover.</p> <p>In case you're wondering: you do get email alerts and alerts in the Controller UI whenever a WAN transition happens.</p>"},{"location":"HomeOps/rpi-usg-4g-failover/#resources","title":"Resources","text":"<ul> <li>hacking MF 823's UI - https://www.development-cycle.com/2017/04/27/zte-mf823-inside/</li> <li>device info https://wiki.archlinux.org/index.php/ZTE_MF_823_(Megafon_M100-3)_4G_Modem</li> <li>tinycore ip router setup https://iotbytes.wordpress.com/configure-microcore-tiny-linux-as-router/</li> </ul>"},{"location":"RaspberryPi/","title":"Raspberry Pi","text":"<p>I use a lot of Raspberry PIs. I want bootstraping them from a fresh SD card to be quick and painless, but I want to preconfigure the network settings and the SSH authentication config from first boot.</p>"},{"location":"RaspberryPi/#raspbian-first-boot-setup","title":"Raspbian First Boot Setup","text":"<ol> <li>Download <code>Raspberry Pi OS Lite</code> from https://www.raspberrypi.com/software/operating-systems/</li> <li>Uncompress with <code>xz -d</code></li> <li> <p>Use <code>main.go</code>  to get the mount point offsets </p> <p><code>go run main.go ./2023&lt;imagename&gt;</code></p> </li> <li> <p>Mount first mount point (this is /boot). Example (Your offsets may vary!):</p> <p><code>mount -v -o offset=272629760,loop ./2022-09-22-raspios-bullseye-arm64-lite.img /mnt</code></p> </li> <li> <p>Inside the mountpoint add the following files</p> <ul> <li>Setup userconf (see password manager for contents) - this creates the default user. It looks like this: <code>admin:$&lt;PASSWORED HASH&gt;</code>. The contents can be generated with <code>password.py</code></li> </ul> <p><code>vim /mnt/userconf</code></p> </li> <li> <p>Enable SSH on boot:</p> <p><code>touch /mnt/ssh</code></p> </li> <li> <p>Copy firstboot.sh setup script:</p> <p><code>cp firstboot.sh /mnt/firstboot.sh</code></p> </li> <li> <p>umount the boot partition</p> </li> <li>Then mount the second mount point (this is the root / partition)</li> <li>Add <code>firstboot.service</code> to <code>/mnt/lib/systemd/system/firstboot.service</code></li> <li> <p>Enable the service:</p> <p><code>cd /mnt/etc/systemd/system/multi-user.target.wants &amp;&amp; ln -s /lib/systemd/system/firstboot.service .</code></p> </li> <li> <p>Edit <code>/mnt/etc/ssh/sshd_config</code>, add these lines:</p> <pre><code>    PasswordAuthentication no\n    PermitRootLogin no\n</code></pre> </li> <li> <p>Setup <code>pi</code> user's SSH config. Note! Even if your user is not <code>pi</code>, put it in <code>/home/pi</code> anyways, the system will rename it on first boot.</p> <pre><code>cd /mnt/home/pi\nmkdir .ssh\nchmod 0700 .ssh\nchown 1000:1000 .ssh\n# add your keys to .ssh/authorized_keys\nchown 1000:1000 .ssh/authorized_keys\nchmod 0600 .ssh/authorized_keys\n</code></pre> </li> </ol> <p>Finally, umount the partition, then rename your <code>.img</code> file to something you'll recognize as being first-boot ready:</p> <pre><code>mv 2022-04-04-raspios-bullseye-armhf-lite.img 2022-04-04-raspios-bullseye-armhf-lite-firstboot-ready.img\n</code></pre>"}]}